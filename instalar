#!/bin/bash

#(c) 2000-2015 Reciclanet AsociaciÃ³n Educativa-Reciclanet Hezkuntza Elkartea www.reciclanet.org
#Copyright
#Licencia GPL

#This manual is free software; you may redistribute it and/or modify it under the terms of the GNU General Public License as published by the Free Software Foundation; either version 2, or (at your option) any later version.

#This is distributed in the hope that it will be useful, but without any warranty; without even the implied warranty of merchantability or fitness for a particular purpose. See the GNU General Public License for more details.

#A copy of the GNU General Public License is available as /usr/share/common-licenses/GPL in the Debian GNU/Linux distribution or on the World Wide Web at the GNU website You can also obtain it by writing to the Free Software Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA

CONFIRM=${CONFIRM:-yes}  # "yes" o "no"
REMOTE_TYPE=${REMOTE_TYPE:-'NFS'}  # NFS, CIFS
SERVER=${SERVER:-10.10.20.3}
HD=${HD:-'/dev/sda'}
HD_SWAP=${HD_SWAP:-4096}  # MiB o "AUTO"
HD_ROOT=${HD_ROOT:-20480}  # MiB o "FILL"
LOCAL_MP=${LOCAL_MP:-'/tmp/pxe'}
REMOTE_MP=${REMOTE_MP:-'/pxe'}
IMAGE_DIR="$LOCAL_MP/${IMAGE_DIR:-img}"
IMAGE_NAME=${IMAGE_NAME:-}  # "lubuntu-i386-es", no "lubuntu-i386-es.fsa"

START_TIME=0
END_TIME=0

is_nfsmount_started() {
test $(/etc/init.d/nfsmount status | awk -F: '{print $2}' | sed 's/ //g') = 'started'
}

function pause(){
  read -p "$*"
}

function get_uuid(){
perl -ne 'print if s/.*?((?:[[:xdigit:]]+-){4}[[:xdigit:]]+).*/\1/'
}

function init_msg(){
START_TIME=`date +%s`
test "$CONFIRM" = no || pause "** AUTOMATIC OS INSTALLATION **
THE CONTENTS OF THE HARD DISK WILL BE COMPLETELY ERASED.

Press CONTROL+C to cancel the installation.
Press ENTER to begin the installation."
}

function hd_format(){
echo "* Hard disk preparation *"
echo "Disabling swap..."
swapoff -a
echo "Cleaning up MBR..."
dd if=/dev/zero of=$HD count=1 bs=512 &> /dev/null

echo 'Creating new partitions...'

if [ "$HD_SWAP" = 'AUTO' ]; then
    local mem_kb=$(sed -rn 's/^MemTotal:\s*([0-9]+) kB/\1/p' /proc/meminfo)
    HD_SWAP=$((mem_kb / 1024 * 3 / 2))  # RAM * 1.5 (MiB)
fi

if [ "$HD_ROOT" = 'FILL' ]; then
    local hd_size_kb=$(sed -ne "s/.* \([0-9]*\) $(basename "$HD")$/\1/p" /proc/partitions)
    local hd_size_sectors=$((hd_size_kb * 2))
    local swap_first_sector=$((hd_size_sectors - (HD_SWAP * 1024 * 2)))
    echo "\
n
p
2
$swap_first_sector

n
p
1


t
2
82
w"
else
    echo "\
n
p
1

+"$HD_ROOT"M
n
p
2

+"$HD_SWAP"M
t
2
82
n
p
3


w"
fi | fdisk $HD &> /dev/null

dmsetup remove_all
partprobe $HD
sleep 5

echo "Formatting swap partition..."
swapoff -a
NEW_SWAP_UUID=$(mkswap "$HD"2 2> /dev/null | get_uuid)

echo "Finished preparing hard disk"
}

function img_install(){
echo "* Image installation *"
echo "Starting image installation"

if [ "$REMOTE_TYPE" = 'NFS' ] && ! is_nfsmount_started; then
    echo "NFS service is disabled, enabling..."
    /etc/init.d/nfsmount start &> /dev/null
fi

mkdir -p $LOCAL_MP
case "$REMOTE_TYPE" in
    (NFS) mount -t nfs -o nolock "$SERVER:$REMOTE_MP" "$LOCAL_MP" &> /dev/null \
                && REMOTE_MOUNTED=yes
          ;;
    (CIFS) mount -t cifs -o ro,guest "//$SERVER$REMOTE_MP" "$LOCAL_MP" &> /dev/null \
                 && REMOTE_MOUNTED=yes
           ;;
    (*) REMOTE_MOUNTED=no  # local
esac

if [ ! "$IMAGE_NAME" ]; then
    cd $IMAGE_DIR
    IMAGES=($(ls -f ./*.fsa))
    cd - &> /dev/null
    IMAGE_NUM=${#IMAGES[@]}
    ((LAST_POS=$IMAGE_NUM-1))
    SELECTED=100

    while ! [[ "${SELECTED}" =~ ^[0-9]+$ ]] || [ $SELECTED -lt 0 ] || [ $SELECTED -ge $IMAGE_NUM ]; do
        echo
        echo "Images available for installation:"
        for i in `seq 0 $LAST_POS`; do
            IMAGES[$i]=`echo ${IMAGES[$i]} | sed 's,./,,g'`
            echo "$i) ${IMAGES[$i]}"
        done
        echo "Please enter the number of the image that you want to install:"
        read SELECTED
        echo
    done
    IMAGE_NAME=${IMAGES[$SELECTED]%.fsa}
fi

echo "You have selected image $IMAGE_NAME"
echo "Starting image installation.
The operation may take around 5 minutes."

fsarchiver restfs "$IMAGE_DIR/$IMAGE_NAME.fsa" id=0,dest="$HD"1 &> /dev/null
if [ "$HD_ROOT" != 'FILL' ]; then
    fsarchiver restfs "$IMAGE_DIR/$IMAGE_NAME.fsa" id=1,dest="$HD"3 &> /dev/null
fi
if [ $REMOTE_MOUNTED = yes ]; then
    umount "$LOCAL_MP" &> /dev/null
fi

if [ "$REMOTE_TYPE" = 'NFS' ] && is_nfsmount_started; then
    echo "NFS service is enabled, disabling..."
    /etc/init.d/nfsmount start &> /dev/null
fi
}

function grub_install(){
echo "* GRUB installation *"

echo "Mounting ${HD}1..."
local tmproot=$(mktemp -d)
mount "$HD"1 $tmproot

echo "Installing GRUB..."
grub-install \
     --directory=$tmproot/usr/lib/grub/i386-pc \
     --root-directory=$tmproot \
     $HD &> /dev/null

echo "Generating UUID ${HD}2 (swap)..."
OLD_SWAP_UUID=$(grep swap $tmproot/etc/fstab | get_uuid)
sed -i "s/$OLD_SWAP_UUID/$NEW_SWAP_UUID/g" $tmproot/etc/fstab

echo "Unmounting ${HD}1"
umount $tmproot
rmdir $tmproot
}

function end_msg(){
END_TIME=`date +%s`
(( EXEC_TIME = $END_TIME - $START_TIME ))
echo "Installation finished: only rebooting the device is needed."
echo "Installation time: $EXEC_TIME seconds"
}

echo
init_msg
echo
hd_format
echo
img_install
echo
grub_install
echo
end_msg
echo
